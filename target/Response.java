/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baicdata.stat;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("push", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("show", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("click", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseTupleSchemeFactory());
  }

  public String id; // required
  public int push; // required
  public int show; // required
  public int click; // required
  public double cost; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PUSH((short)2, "push"),
    SHOW((short)3, "show"),
    CLICK((short)4, "click"),
    COST((short)5, "cost");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PUSH
          return PUSH;
        case 3: // SHOW
          return SHOW;
        case 4: // CLICK
          return CLICK;
        case 5: // COST
          return COST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PUSH_ISSET_ID = 0;
  private static final int __SHOW_ISSET_ID = 1;
  private static final int __CLICK_ISSET_ID = 2;
  private static final int __COST_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSH, new org.apache.thrift.meta_data.FieldMetaData("push", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW, new org.apache.thrift.meta_data.FieldMetaData("show", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK, new org.apache.thrift.meta_data.FieldMetaData("click", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    String id,
    int push,
    int show,
    int click,
    double cost)
  {
    this();
    this.id = id;
    this.push = push;
    setPushIsSet(true);
    this.show = show;
    setShowIsSet(true);
    this.click = click;
    setClickIsSet(true);
    this.cost = cost;
    setCostIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.push = other.push;
    this.show = other.show;
    this.click = other.click;
    this.cost = other.cost;
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setPushIsSet(false);
    this.push = 0;
    setShowIsSet(false);
    this.show = 0;
    setClickIsSet(false);
    this.click = 0;
    setCostIsSet(false);
    this.cost = 0.0;
  }

  public String getId() {
    return this.id;
  }

  public Response setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getPush() {
    return this.push;
  }

  public Response setPush(int push) {
    this.push = push;
    setPushIsSet(true);
    return this;
  }

  public void unsetPush() {
    __isset_bit_vector.clear(__PUSH_ISSET_ID);
  }

  /** Returns true if field push is set (has been assigned a value) and false otherwise */
  public boolean isSetPush() {
    return __isset_bit_vector.get(__PUSH_ISSET_ID);
  }

  public void setPushIsSet(boolean value) {
    __isset_bit_vector.set(__PUSH_ISSET_ID, value);
  }

  public int getShow() {
    return this.show;
  }

  public Response setShow(int show) {
    this.show = show;
    setShowIsSet(true);
    return this;
  }

  public void unsetShow() {
    __isset_bit_vector.clear(__SHOW_ISSET_ID);
  }

  /** Returns true if field show is set (has been assigned a value) and false otherwise */
  public boolean isSetShow() {
    return __isset_bit_vector.get(__SHOW_ISSET_ID);
  }

  public void setShowIsSet(boolean value) {
    __isset_bit_vector.set(__SHOW_ISSET_ID, value);
  }

  public int getClick() {
    return this.click;
  }

  public Response setClick(int click) {
    this.click = click;
    setClickIsSet(true);
    return this;
  }

  public void unsetClick() {
    __isset_bit_vector.clear(__CLICK_ISSET_ID);
  }

  /** Returns true if field click is set (has been assigned a value) and false otherwise */
  public boolean isSetClick() {
    return __isset_bit_vector.get(__CLICK_ISSET_ID);
  }

  public void setClickIsSet(boolean value) {
    __isset_bit_vector.set(__CLICK_ISSET_ID, value);
  }

  public double getCost() {
    return this.cost;
  }

  public Response setCost(double cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bit_vector.clear(__COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return __isset_bit_vector.get(__COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bit_vector.set(__COST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PUSH:
      if (value == null) {
        unsetPush();
      } else {
        setPush((Integer)value);
      }
      break;

    case SHOW:
      if (value == null) {
        unsetShow();
      } else {
        setShow((Integer)value);
      }
      break;

    case CLICK:
      if (value == null) {
        unsetClick();
      } else {
        setClick((Integer)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PUSH:
      return Integer.valueOf(getPush());

    case SHOW:
      return Integer.valueOf(getShow());

    case CLICK:
      return Integer.valueOf(getClick());

    case COST:
      return Double.valueOf(getCost());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PUSH:
      return isSetPush();
    case SHOW:
      return isSetShow();
    case CLICK:
      return isSetClick();
    case COST:
      return isSetCost();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_push = true;
    boolean that_present_push = true;
    if (this_present_push || that_present_push) {
      if (!(this_present_push && that_present_push))
        return false;
      if (this.push != that.push)
        return false;
    }

    boolean this_present_show = true;
    boolean that_present_show = true;
    if (this_present_show || that_present_show) {
      if (!(this_present_show && that_present_show))
        return false;
      if (this.show != that.show)
        return false;
    }

    boolean this_present_click = true;
    boolean that_present_click = true;
    if (this_present_click || that_present_click) {
      if (!(this_present_click && that_present_click))
        return false;
      if (this.click != that.click)
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Response typedOther = (Response)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPush()).compareTo(typedOther.isSetPush());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPush()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push, typedOther.push);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow()).compareTo(typedOther.isSetShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show, typedOther.show);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClick()).compareTo(typedOther.isSetClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click, typedOther.click);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost()).compareTo(typedOther.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, typedOther.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Response(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("push:");
    sb.append(this.push);
    first = false;
    if (!first) sb.append(", ");
    sb.append("show:");
    sb.append(this.show);
    first = false;
    if (!first) sb.append(", ");
    sb.append("click:");
    sb.append(this.click);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUSH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.push = iprot.readI32();
              struct.setPushIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.show = iprot.readI32();
              struct.setShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.click = iprot.readI32();
              struct.setClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost = iprot.readDouble();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PUSH_FIELD_DESC);
      oprot.writeI32(struct.push);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_FIELD_DESC);
      oprot.writeI32(struct.show);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLICK_FIELD_DESC);
      oprot.writeI32(struct.click);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeDouble(struct.cost);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPush()) {
        optionals.set(1);
      }
      if (struct.isSetShow()) {
        optionals.set(2);
      }
      if (struct.isSetClick()) {
        optionals.set(3);
      }
      if (struct.isSetCost()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPush()) {
        oprot.writeI32(struct.push);
      }
      if (struct.isSetShow()) {
        oprot.writeI32(struct.show);
      }
      if (struct.isSetClick()) {
        oprot.writeI32(struct.click);
      }
      if (struct.isSetCost()) {
        oprot.writeDouble(struct.cost);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.push = iprot.readI32();
        struct.setPushIsSet(true);
      }
      if (incoming.get(2)) {
        struct.show = iprot.readI32();
        struct.setShowIsSet(true);
      }
      if (incoming.get(3)) {
        struct.click = iprot.readI32();
        struct.setClickIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cost = iprot.readDouble();
        struct.setCostIsSet(true);
      }
    }
  }

}

