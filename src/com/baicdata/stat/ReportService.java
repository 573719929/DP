/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baicdata.stat;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReportService {

  public interface Iface {

    public reportResult AdReportByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult AdReportByGroupId(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult GroupReportByPlanId(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult PlanReportByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult AreaByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult AreaByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult AreaByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult AreaByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult DayByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult DayByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult DayByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult DayByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult SourceByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult SourceByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult SourceByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult SourceByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult HourByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult HourByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult HourByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public reportResult HourByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException;

    public void ping(int ignoreme) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void AdReportByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AdReportByAdid_call> resultHandler) throws org.apache.thrift.TException;

    public void AdReportByGroupId(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AdReportByGroupId_call> resultHandler) throws org.apache.thrift.TException;

    public void GroupReportByPlanId(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GroupReportByPlanId_call> resultHandler) throws org.apache.thrift.TException;

    public void PlanReportByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.PlanReportByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void AreaByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AreaByAdid_call> resultHandler) throws org.apache.thrift.TException;

    public void AreaByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AreaByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void AreaByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AreaByPid_call> resultHandler) throws org.apache.thrift.TException;

    public void AreaByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AreaByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void DayByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DayByAdid_call> resultHandler) throws org.apache.thrift.TException;

    public void DayByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DayByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void DayByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DayByPid_call> resultHandler) throws org.apache.thrift.TException;

    public void DayByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DayByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void SourceByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SourceByAdid_call> resultHandler) throws org.apache.thrift.TException;

    public void SourceByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SourceByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void SourceByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SourceByPid_call> resultHandler) throws org.apache.thrift.TException;

    public void SourceByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SourceByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void HourByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.HourByAdid_call> resultHandler) throws org.apache.thrift.TException;

    public void HourByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.HourByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void HourByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.HourByPid_call> resultHandler) throws org.apache.thrift.TException;

    public void HourByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.HourByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void ping(int ignoreme, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public reportResult AdReportByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_AdReportByAdid(q, p);
      return recv_AdReportByAdid();
    }

    public void send_AdReportByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      AdReportByAdid_args args = new AdReportByAdid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("AdReportByAdid", args);
    }

    public reportResult recv_AdReportByAdid() throws org.apache.thrift.TException
    {
      AdReportByAdid_result result = new AdReportByAdid_result();
      receiveBase(result, "AdReportByAdid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AdReportByAdid failed: unknown result");
    }

    public reportResult AdReportByGroupId(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_AdReportByGroupId(q, p);
      return recv_AdReportByGroupId();
    }

    public void send_AdReportByGroupId(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      AdReportByGroupId_args args = new AdReportByGroupId_args();
      args.setQ(q);
      args.setP(p);
      sendBase("AdReportByGroupId", args);
    }

    public reportResult recv_AdReportByGroupId() throws org.apache.thrift.TException
    {
      AdReportByGroupId_result result = new AdReportByGroupId_result();
      receiveBase(result, "AdReportByGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AdReportByGroupId failed: unknown result");
    }

    public reportResult GroupReportByPlanId(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_GroupReportByPlanId(q, p);
      return recv_GroupReportByPlanId();
    }

    public void send_GroupReportByPlanId(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      GroupReportByPlanId_args args = new GroupReportByPlanId_args();
      args.setQ(q);
      args.setP(p);
      sendBase("GroupReportByPlanId", args);
    }

    public reportResult recv_GroupReportByPlanId() throws org.apache.thrift.TException
    {
      GroupReportByPlanId_result result = new GroupReportByPlanId_result();
      receiveBase(result, "GroupReportByPlanId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GroupReportByPlanId failed: unknown result");
    }

    public reportResult PlanReportByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_PlanReportByUid(q, p);
      return recv_PlanReportByUid();
    }

    public void send_PlanReportByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      PlanReportByUid_args args = new PlanReportByUid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("PlanReportByUid", args);
    }

    public reportResult recv_PlanReportByUid() throws org.apache.thrift.TException
    {
      PlanReportByUid_result result = new PlanReportByUid_result();
      receiveBase(result, "PlanReportByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PlanReportByUid failed: unknown result");
    }

    public reportResult AreaByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_AreaByAdid(q, p);
      return recv_AreaByAdid();
    }

    public void send_AreaByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      AreaByAdid_args args = new AreaByAdid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("AreaByAdid", args);
    }

    public reportResult recv_AreaByAdid() throws org.apache.thrift.TException
    {
      AreaByAdid_result result = new AreaByAdid_result();
      receiveBase(result, "AreaByAdid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AreaByAdid failed: unknown result");
    }

    public reportResult AreaByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_AreaByGid(q, p);
      return recv_AreaByGid();
    }

    public void send_AreaByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      AreaByGid_args args = new AreaByGid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("AreaByGid", args);
    }

    public reportResult recv_AreaByGid() throws org.apache.thrift.TException
    {
      AreaByGid_result result = new AreaByGid_result();
      receiveBase(result, "AreaByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AreaByGid failed: unknown result");
    }

    public reportResult AreaByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_AreaByPid(q, p);
      return recv_AreaByPid();
    }

    public void send_AreaByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      AreaByPid_args args = new AreaByPid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("AreaByPid", args);
    }

    public reportResult recv_AreaByPid() throws org.apache.thrift.TException
    {
      AreaByPid_result result = new AreaByPid_result();
      receiveBase(result, "AreaByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AreaByPid failed: unknown result");
    }

    public reportResult AreaByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_AreaByUid(q, p);
      return recv_AreaByUid();
    }

    public void send_AreaByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      AreaByUid_args args = new AreaByUid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("AreaByUid", args);
    }

    public reportResult recv_AreaByUid() throws org.apache.thrift.TException
    {
      AreaByUid_result result = new AreaByUid_result();
      receiveBase(result, "AreaByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AreaByUid failed: unknown result");
    }

    public reportResult DayByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_DayByAdid(q, p);
      return recv_DayByAdid();
    }

    public void send_DayByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      DayByAdid_args args = new DayByAdid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("DayByAdid", args);
    }

    public reportResult recv_DayByAdid() throws org.apache.thrift.TException
    {
      DayByAdid_result result = new DayByAdid_result();
      receiveBase(result, "DayByAdid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DayByAdid failed: unknown result");
    }

    public reportResult DayByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_DayByGid(q, p);
      return recv_DayByGid();
    }

    public void send_DayByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      DayByGid_args args = new DayByGid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("DayByGid", args);
    }

    public reportResult recv_DayByGid() throws org.apache.thrift.TException
    {
      DayByGid_result result = new DayByGid_result();
      receiveBase(result, "DayByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DayByGid failed: unknown result");
    }

    public reportResult DayByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_DayByPid(q, p);
      return recv_DayByPid();
    }

    public void send_DayByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      DayByPid_args args = new DayByPid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("DayByPid", args);
    }

    public reportResult recv_DayByPid() throws org.apache.thrift.TException
    {
      DayByPid_result result = new DayByPid_result();
      receiveBase(result, "DayByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DayByPid failed: unknown result");
    }

    public reportResult DayByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_DayByUid(q, p);
      return recv_DayByUid();
    }

    public void send_DayByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      DayByUid_args args = new DayByUid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("DayByUid", args);
    }

    public reportResult recv_DayByUid() throws org.apache.thrift.TException
    {
      DayByUid_result result = new DayByUid_result();
      receiveBase(result, "DayByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DayByUid failed: unknown result");
    }

    public reportResult SourceByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_SourceByAdid(q, p);
      return recv_SourceByAdid();
    }

    public void send_SourceByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      SourceByAdid_args args = new SourceByAdid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("SourceByAdid", args);
    }

    public reportResult recv_SourceByAdid() throws org.apache.thrift.TException
    {
      SourceByAdid_result result = new SourceByAdid_result();
      receiveBase(result, "SourceByAdid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SourceByAdid failed: unknown result");
    }

    public reportResult SourceByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_SourceByGid(q, p);
      return recv_SourceByGid();
    }

    public void send_SourceByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      SourceByGid_args args = new SourceByGid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("SourceByGid", args);
    }

    public reportResult recv_SourceByGid() throws org.apache.thrift.TException
    {
      SourceByGid_result result = new SourceByGid_result();
      receiveBase(result, "SourceByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SourceByGid failed: unknown result");
    }

    public reportResult SourceByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_SourceByPid(q, p);
      return recv_SourceByPid();
    }

    public void send_SourceByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      SourceByPid_args args = new SourceByPid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("SourceByPid", args);
    }

    public reportResult recv_SourceByPid() throws org.apache.thrift.TException
    {
      SourceByPid_result result = new SourceByPid_result();
      receiveBase(result, "SourceByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SourceByPid failed: unknown result");
    }

    public reportResult SourceByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_SourceByUid(q, p);
      return recv_SourceByUid();
    }

    public void send_SourceByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      SourceByUid_args args = new SourceByUid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("SourceByUid", args);
    }

    public reportResult recv_SourceByUid() throws org.apache.thrift.TException
    {
      SourceByUid_result result = new SourceByUid_result();
      receiveBase(result, "SourceByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SourceByUid failed: unknown result");
    }

    public reportResult HourByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_HourByAdid(q, p);
      return recv_HourByAdid();
    }

    public void send_HourByAdid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      HourByAdid_args args = new HourByAdid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("HourByAdid", args);
    }

    public reportResult recv_HourByAdid() throws org.apache.thrift.TException
    {
      HourByAdid_result result = new HourByAdid_result();
      receiveBase(result, "HourByAdid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "HourByAdid failed: unknown result");
    }

    public reportResult HourByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_HourByGid(q, p);
      return recv_HourByGid();
    }

    public void send_HourByGid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      HourByGid_args args = new HourByGid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("HourByGid", args);
    }

    public reportResult recv_HourByGid() throws org.apache.thrift.TException
    {
      HourByGid_result result = new HourByGid_result();
      receiveBase(result, "HourByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "HourByGid failed: unknown result");
    }

    public reportResult HourByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_HourByPid(q, p);
      return recv_HourByPid();
    }

    public void send_HourByPid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      HourByPid_args args = new HourByPid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("HourByPid", args);
    }

    public reportResult recv_HourByPid() throws org.apache.thrift.TException
    {
      HourByPid_result result = new HourByPid_result();
      receiveBase(result, "HourByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "HourByPid failed: unknown result");
    }

    public reportResult HourByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      send_HourByUid(q, p);
      return recv_HourByUid();
    }

    public void send_HourByUid(queryOptions q, pageOptions p) throws org.apache.thrift.TException
    {
      HourByUid_args args = new HourByUid_args();
      args.setQ(q);
      args.setP(p);
      sendBase("HourByUid", args);
    }

    public reportResult recv_HourByUid() throws org.apache.thrift.TException
    {
      HourByUid_result result = new HourByUid_result();
      receiveBase(result, "HourByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "HourByUid failed: unknown result");
    }

    public void ping(int ignoreme) throws org.apache.thrift.TException
    {
      send_ping(ignoreme);
      recv_ping();
    }

    public void send_ping(int ignoreme) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setIgnoreme(ignoreme);
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void AdReportByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AdReportByAdid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AdReportByAdid_call method_call = new AdReportByAdid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AdReportByAdid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public AdReportByAdid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AdReportByAdid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AdReportByAdid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AdReportByAdid_args args = new AdReportByAdid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AdReportByAdid();
      }
    }

    public void AdReportByGroupId(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AdReportByGroupId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AdReportByGroupId_call method_call = new AdReportByGroupId_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AdReportByGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public AdReportByGroupId_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AdReportByGroupId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AdReportByGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AdReportByGroupId_args args = new AdReportByGroupId_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AdReportByGroupId();
      }
    }

    public void GroupReportByPlanId(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<GroupReportByPlanId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GroupReportByPlanId_call method_call = new GroupReportByPlanId_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GroupReportByPlanId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public GroupReportByPlanId_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<GroupReportByPlanId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GroupReportByPlanId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GroupReportByPlanId_args args = new GroupReportByPlanId_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GroupReportByPlanId();
      }
    }

    public void PlanReportByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<PlanReportByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PlanReportByUid_call method_call = new PlanReportByUid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PlanReportByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public PlanReportByUid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<PlanReportByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PlanReportByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PlanReportByUid_args args = new PlanReportByUid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_PlanReportByUid();
      }
    }

    public void AreaByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByAdid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AreaByAdid_call method_call = new AreaByAdid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AreaByAdid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public AreaByAdid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByAdid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AreaByAdid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AreaByAdid_args args = new AreaByAdid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AreaByAdid();
      }
    }

    public void AreaByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AreaByGid_call method_call = new AreaByGid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AreaByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public AreaByGid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AreaByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AreaByGid_args args = new AreaByGid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AreaByGid();
      }
    }

    public void AreaByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByPid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AreaByPid_call method_call = new AreaByPid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AreaByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public AreaByPid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByPid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AreaByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AreaByPid_args args = new AreaByPid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AreaByPid();
      }
    }

    public void AreaByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AreaByUid_call method_call = new AreaByUid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AreaByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public AreaByUid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<AreaByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AreaByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AreaByUid_args args = new AreaByUid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AreaByUid();
      }
    }

    public void DayByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByAdid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DayByAdid_call method_call = new DayByAdid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DayByAdid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public DayByAdid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByAdid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DayByAdid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DayByAdid_args args = new DayByAdid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DayByAdid();
      }
    }

    public void DayByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DayByGid_call method_call = new DayByGid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DayByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public DayByGid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DayByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DayByGid_args args = new DayByGid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DayByGid();
      }
    }

    public void DayByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByPid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DayByPid_call method_call = new DayByPid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DayByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public DayByPid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByPid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DayByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DayByPid_args args = new DayByPid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DayByPid();
      }
    }

    public void DayByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DayByUid_call method_call = new DayByUid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DayByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public DayByUid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<DayByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DayByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DayByUid_args args = new DayByUid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DayByUid();
      }
    }

    public void SourceByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByAdid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SourceByAdid_call method_call = new SourceByAdid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SourceByAdid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public SourceByAdid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByAdid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SourceByAdid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SourceByAdid_args args = new SourceByAdid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SourceByAdid();
      }
    }

    public void SourceByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SourceByGid_call method_call = new SourceByGid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SourceByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public SourceByGid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SourceByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SourceByGid_args args = new SourceByGid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SourceByGid();
      }
    }

    public void SourceByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByPid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SourceByPid_call method_call = new SourceByPid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SourceByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public SourceByPid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByPid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SourceByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SourceByPid_args args = new SourceByPid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SourceByPid();
      }
    }

    public void SourceByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SourceByUid_call method_call = new SourceByUid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SourceByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public SourceByUid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<SourceByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SourceByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SourceByUid_args args = new SourceByUid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SourceByUid();
      }
    }

    public void HourByAdid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByAdid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      HourByAdid_call method_call = new HourByAdid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class HourByAdid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public HourByAdid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByAdid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("HourByAdid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        HourByAdid_args args = new HourByAdid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_HourByAdid();
      }
    }

    public void HourByGid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      HourByGid_call method_call = new HourByGid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class HourByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public HourByGid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("HourByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        HourByGid_args args = new HourByGid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_HourByGid();
      }
    }

    public void HourByPid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByPid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      HourByPid_call method_call = new HourByPid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class HourByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public HourByPid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByPid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("HourByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        HourByPid_args args = new HourByPid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_HourByPid();
      }
    }

    public void HourByUid(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      HourByUid_call method_call = new HourByUid_call(q, p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class HourByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private queryOptions q;
      private pageOptions p;
      public HourByUid_call(queryOptions q, pageOptions p, org.apache.thrift.async.AsyncMethodCallback<HourByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.q = q;
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("HourByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        HourByUid_args args = new HourByUid_args();
        args.setQ(q);
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public reportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_HourByUid();
      }
    }

    public void ping(int ignoreme, org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(ignoreme, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int ignoreme;
      public ping_call(int ignoreme, org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ignoreme = ignoreme;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setIgnoreme(ignoreme);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("AdReportByAdid", new AdReportByAdid());
      processMap.put("AdReportByGroupId", new AdReportByGroupId());
      processMap.put("GroupReportByPlanId", new GroupReportByPlanId());
      processMap.put("PlanReportByUid", new PlanReportByUid());
      processMap.put("AreaByAdid", new AreaByAdid());
      processMap.put("AreaByGid", new AreaByGid());
      processMap.put("AreaByPid", new AreaByPid());
      processMap.put("AreaByUid", new AreaByUid());
      processMap.put("DayByAdid", new DayByAdid());
      processMap.put("DayByGid", new DayByGid());
      processMap.put("DayByPid", new DayByPid());
      processMap.put("DayByUid", new DayByUid());
      processMap.put("SourceByAdid", new SourceByAdid());
      processMap.put("SourceByGid", new SourceByGid());
      processMap.put("SourceByPid", new SourceByPid());
      processMap.put("SourceByUid", new SourceByUid());
      processMap.put("HourByAdid", new HourByAdid());
      processMap.put("HourByGid", new HourByGid());
      processMap.put("HourByPid", new HourByPid());
      processMap.put("HourByUid", new HourByUid());
      processMap.put("ping", new ping());
      return processMap;
    }

    private static class AdReportByAdid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AdReportByAdid_args> {
      public AdReportByAdid() {
        super("AdReportByAdid");
      }

      public AdReportByAdid_args getEmptyArgsInstance() {
        return new AdReportByAdid_args();
      }

      public AdReportByAdid_result getResult(I iface, AdReportByAdid_args args) throws org.apache.thrift.TException {
        AdReportByAdid_result result = new AdReportByAdid_result();
        result.success = iface.AdReportByAdid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class AdReportByGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AdReportByGroupId_args> {
      public AdReportByGroupId() {
        super("AdReportByGroupId");
      }

      public AdReportByGroupId_args getEmptyArgsInstance() {
        return new AdReportByGroupId_args();
      }

      public AdReportByGroupId_result getResult(I iface, AdReportByGroupId_args args) throws org.apache.thrift.TException {
        AdReportByGroupId_result result = new AdReportByGroupId_result();
        result.success = iface.AdReportByGroupId(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class GroupReportByPlanId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GroupReportByPlanId_args> {
      public GroupReportByPlanId() {
        super("GroupReportByPlanId");
      }

      public GroupReportByPlanId_args getEmptyArgsInstance() {
        return new GroupReportByPlanId_args();
      }

      public GroupReportByPlanId_result getResult(I iface, GroupReportByPlanId_args args) throws org.apache.thrift.TException {
        GroupReportByPlanId_result result = new GroupReportByPlanId_result();
        result.success = iface.GroupReportByPlanId(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class PlanReportByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PlanReportByUid_args> {
      public PlanReportByUid() {
        super("PlanReportByUid");
      }

      public PlanReportByUid_args getEmptyArgsInstance() {
        return new PlanReportByUid_args();
      }

      public PlanReportByUid_result getResult(I iface, PlanReportByUid_args args) throws org.apache.thrift.TException {
        PlanReportByUid_result result = new PlanReportByUid_result();
        result.success = iface.PlanReportByUid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class AreaByAdid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AreaByAdid_args> {
      public AreaByAdid() {
        super("AreaByAdid");
      }

      public AreaByAdid_args getEmptyArgsInstance() {
        return new AreaByAdid_args();
      }

      public AreaByAdid_result getResult(I iface, AreaByAdid_args args) throws org.apache.thrift.TException {
        AreaByAdid_result result = new AreaByAdid_result();
        result.success = iface.AreaByAdid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class AreaByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AreaByGid_args> {
      public AreaByGid() {
        super("AreaByGid");
      }

      public AreaByGid_args getEmptyArgsInstance() {
        return new AreaByGid_args();
      }

      public AreaByGid_result getResult(I iface, AreaByGid_args args) throws org.apache.thrift.TException {
        AreaByGid_result result = new AreaByGid_result();
        result.success = iface.AreaByGid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class AreaByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AreaByPid_args> {
      public AreaByPid() {
        super("AreaByPid");
      }

      public AreaByPid_args getEmptyArgsInstance() {
        return new AreaByPid_args();
      }

      public AreaByPid_result getResult(I iface, AreaByPid_args args) throws org.apache.thrift.TException {
        AreaByPid_result result = new AreaByPid_result();
        result.success = iface.AreaByPid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class AreaByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AreaByUid_args> {
      public AreaByUid() {
        super("AreaByUid");
      }

      public AreaByUid_args getEmptyArgsInstance() {
        return new AreaByUid_args();
      }

      public AreaByUid_result getResult(I iface, AreaByUid_args args) throws org.apache.thrift.TException {
        AreaByUid_result result = new AreaByUid_result();
        result.success = iface.AreaByUid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class DayByAdid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DayByAdid_args> {
      public DayByAdid() {
        super("DayByAdid");
      }

      public DayByAdid_args getEmptyArgsInstance() {
        return new DayByAdid_args();
      }

      public DayByAdid_result getResult(I iface, DayByAdid_args args) throws org.apache.thrift.TException {
        DayByAdid_result result = new DayByAdid_result();
        result.success = iface.DayByAdid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class DayByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DayByGid_args> {
      public DayByGid() {
        super("DayByGid");
      }

      public DayByGid_args getEmptyArgsInstance() {
        return new DayByGid_args();
      }

      public DayByGid_result getResult(I iface, DayByGid_args args) throws org.apache.thrift.TException {
        DayByGid_result result = new DayByGid_result();
        result.success = iface.DayByGid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class DayByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DayByPid_args> {
      public DayByPid() {
        super("DayByPid");
      }

      public DayByPid_args getEmptyArgsInstance() {
        return new DayByPid_args();
      }

      public DayByPid_result getResult(I iface, DayByPid_args args) throws org.apache.thrift.TException {
        DayByPid_result result = new DayByPid_result();
        result.success = iface.DayByPid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class DayByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DayByUid_args> {
      public DayByUid() {
        super("DayByUid");
      }

      public DayByUid_args getEmptyArgsInstance() {
        return new DayByUid_args();
      }

      public DayByUid_result getResult(I iface, DayByUid_args args) throws org.apache.thrift.TException {
        DayByUid_result result = new DayByUid_result();
        result.success = iface.DayByUid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class SourceByAdid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SourceByAdid_args> {
      public SourceByAdid() {
        super("SourceByAdid");
      }

      public SourceByAdid_args getEmptyArgsInstance() {
        return new SourceByAdid_args();
      }

      public SourceByAdid_result getResult(I iface, SourceByAdid_args args) throws org.apache.thrift.TException {
        SourceByAdid_result result = new SourceByAdid_result();
        result.success = iface.SourceByAdid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class SourceByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SourceByGid_args> {
      public SourceByGid() {
        super("SourceByGid");
      }

      public SourceByGid_args getEmptyArgsInstance() {
        return new SourceByGid_args();
      }

      public SourceByGid_result getResult(I iface, SourceByGid_args args) throws org.apache.thrift.TException {
        SourceByGid_result result = new SourceByGid_result();
        result.success = iface.SourceByGid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class SourceByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SourceByPid_args> {
      public SourceByPid() {
        super("SourceByPid");
      }

      public SourceByPid_args getEmptyArgsInstance() {
        return new SourceByPid_args();
      }

      public SourceByPid_result getResult(I iface, SourceByPid_args args) throws org.apache.thrift.TException {
        SourceByPid_result result = new SourceByPid_result();
        result.success = iface.SourceByPid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class SourceByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SourceByUid_args> {
      public SourceByUid() {
        super("SourceByUid");
      }

      public SourceByUid_args getEmptyArgsInstance() {
        return new SourceByUid_args();
      }

      public SourceByUid_result getResult(I iface, SourceByUid_args args) throws org.apache.thrift.TException {
        SourceByUid_result result = new SourceByUid_result();
        result.success = iface.SourceByUid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class HourByAdid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, HourByAdid_args> {
      public HourByAdid() {
        super("HourByAdid");
      }

      public HourByAdid_args getEmptyArgsInstance() {
        return new HourByAdid_args();
      }

      public HourByAdid_result getResult(I iface, HourByAdid_args args) throws org.apache.thrift.TException {
        HourByAdid_result result = new HourByAdid_result();
        result.success = iface.HourByAdid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class HourByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, HourByGid_args> {
      public HourByGid() {
        super("HourByGid");
      }

      public HourByGid_args getEmptyArgsInstance() {
        return new HourByGid_args();
      }

      public HourByGid_result getResult(I iface, HourByGid_args args) throws org.apache.thrift.TException {
        HourByGid_result result = new HourByGid_result();
        result.success = iface.HourByGid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class HourByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, HourByPid_args> {
      public HourByPid() {
        super("HourByPid");
      }

      public HourByPid_args getEmptyArgsInstance() {
        return new HourByPid_args();
      }

      public HourByPid_result getResult(I iface, HourByPid_args args) throws org.apache.thrift.TException {
        HourByPid_result result = new HourByPid_result();
        result.success = iface.HourByPid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class HourByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, HourByUid_args> {
      public HourByUid() {
        super("HourByUid");
      }

      public HourByUid_args getEmptyArgsInstance() {
        return new HourByUid_args();
      }

      public HourByUid_result getResult(I iface, HourByUid_args args) throws org.apache.thrift.TException {
        HourByUid_result result = new HourByUid_result();
        result.success = iface.HourByUid(args.q, args.p);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

    private static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping(args.ignoreme);
        return result;
      }

	@Override
	protected boolean isOneway() {
		// TODO Auto-generated method stub
		return false;
	}
    }

  }

  public static class AdReportByAdid_args implements org.apache.thrift.TBase<AdReportByAdid_args, AdReportByAdid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdReportByAdid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AdReportByAdid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AdReportByAdid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdReportByAdid_args.class, metaDataMap);
    }

    public AdReportByAdid_args() {
    }

    public AdReportByAdid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AdReportByAdid_args(AdReportByAdid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public AdReportByAdid_args deepCopy() {
      return new AdReportByAdid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public AdReportByAdid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public AdReportByAdid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AdReportByAdid_args)
        return this.equals((AdReportByAdid_args)that);
      return false;
    }

    public boolean equals(AdReportByAdid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AdReportByAdid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AdReportByAdid_args typedOther = (AdReportByAdid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AdReportByAdid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AdReportByAdid_argsStandardSchemeFactory implements SchemeFactory {
      public AdReportByAdid_argsStandardScheme getScheme() {
        return new AdReportByAdid_argsStandardScheme();
      }
    }

    private static class AdReportByAdid_argsStandardScheme extends StandardScheme<AdReportByAdid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AdReportByAdid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AdReportByAdid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AdReportByAdid_argsTupleSchemeFactory implements SchemeFactory {
      public AdReportByAdid_argsTupleScheme getScheme() {
        return new AdReportByAdid_argsTupleScheme();
      }
    }

    private static class AdReportByAdid_argsTupleScheme extends TupleScheme<AdReportByAdid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AdReportByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AdReportByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class AdReportByAdid_result implements org.apache.thrift.TBase<AdReportByAdid_result, AdReportByAdid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdReportByAdid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AdReportByAdid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AdReportByAdid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdReportByAdid_result.class, metaDataMap);
    }

    public AdReportByAdid_result() {
    }

    public AdReportByAdid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AdReportByAdid_result(AdReportByAdid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public AdReportByAdid_result deepCopy() {
      return new AdReportByAdid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public AdReportByAdid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AdReportByAdid_result)
        return this.equals((AdReportByAdid_result)that);
      return false;
    }

    public boolean equals(AdReportByAdid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AdReportByAdid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AdReportByAdid_result typedOther = (AdReportByAdid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AdReportByAdid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AdReportByAdid_resultStandardSchemeFactory implements SchemeFactory {
      public AdReportByAdid_resultStandardScheme getScheme() {
        return new AdReportByAdid_resultStandardScheme();
      }
    }

    private static class AdReportByAdid_resultStandardScheme extends StandardScheme<AdReportByAdid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AdReportByAdid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AdReportByAdid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AdReportByAdid_resultTupleSchemeFactory implements SchemeFactory {
      public AdReportByAdid_resultTupleScheme getScheme() {
        return new AdReportByAdid_resultTupleScheme();
      }
    }

    private static class AdReportByAdid_resultTupleScheme extends TupleScheme<AdReportByAdid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AdReportByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AdReportByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AdReportByGroupId_args implements org.apache.thrift.TBase<AdReportByGroupId_args, AdReportByGroupId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdReportByGroupId_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AdReportByGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AdReportByGroupId_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdReportByGroupId_args.class, metaDataMap);
    }

    public AdReportByGroupId_args() {
    }

    public AdReportByGroupId_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AdReportByGroupId_args(AdReportByGroupId_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public AdReportByGroupId_args deepCopy() {
      return new AdReportByGroupId_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public AdReportByGroupId_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public AdReportByGroupId_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AdReportByGroupId_args)
        return this.equals((AdReportByGroupId_args)that);
      return false;
    }

    public boolean equals(AdReportByGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AdReportByGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AdReportByGroupId_args typedOther = (AdReportByGroupId_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AdReportByGroupId_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AdReportByGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public AdReportByGroupId_argsStandardScheme getScheme() {
        return new AdReportByGroupId_argsStandardScheme();
      }
    }

    private static class AdReportByGroupId_argsStandardScheme extends StandardScheme<AdReportByGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AdReportByGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AdReportByGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AdReportByGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public AdReportByGroupId_argsTupleScheme getScheme() {
        return new AdReportByGroupId_argsTupleScheme();
      }
    }

    private static class AdReportByGroupId_argsTupleScheme extends TupleScheme<AdReportByGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AdReportByGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AdReportByGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class AdReportByGroupId_result implements org.apache.thrift.TBase<AdReportByGroupId_result, AdReportByGroupId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdReportByGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AdReportByGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AdReportByGroupId_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdReportByGroupId_result.class, metaDataMap);
    }

    public AdReportByGroupId_result() {
    }

    public AdReportByGroupId_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AdReportByGroupId_result(AdReportByGroupId_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public AdReportByGroupId_result deepCopy() {
      return new AdReportByGroupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public AdReportByGroupId_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AdReportByGroupId_result)
        return this.equals((AdReportByGroupId_result)that);
      return false;
    }

    public boolean equals(AdReportByGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AdReportByGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AdReportByGroupId_result typedOther = (AdReportByGroupId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AdReportByGroupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AdReportByGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public AdReportByGroupId_resultStandardScheme getScheme() {
        return new AdReportByGroupId_resultStandardScheme();
      }
    }

    private static class AdReportByGroupId_resultStandardScheme extends StandardScheme<AdReportByGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AdReportByGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AdReportByGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AdReportByGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public AdReportByGroupId_resultTupleScheme getScheme() {
        return new AdReportByGroupId_resultTupleScheme();
      }
    }

    private static class AdReportByGroupId_resultTupleScheme extends TupleScheme<AdReportByGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AdReportByGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AdReportByGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GroupReportByPlanId_args implements org.apache.thrift.TBase<GroupReportByPlanId_args, GroupReportByPlanId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupReportByPlanId_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GroupReportByPlanId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GroupReportByPlanId_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupReportByPlanId_args.class, metaDataMap);
    }

    public GroupReportByPlanId_args() {
    }

    public GroupReportByPlanId_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GroupReportByPlanId_args(GroupReportByPlanId_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public GroupReportByPlanId_args deepCopy() {
      return new GroupReportByPlanId_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public GroupReportByPlanId_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public GroupReportByPlanId_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GroupReportByPlanId_args)
        return this.equals((GroupReportByPlanId_args)that);
      return false;
    }

    public boolean equals(GroupReportByPlanId_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GroupReportByPlanId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GroupReportByPlanId_args typedOther = (GroupReportByPlanId_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GroupReportByPlanId_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GroupReportByPlanId_argsStandardSchemeFactory implements SchemeFactory {
      public GroupReportByPlanId_argsStandardScheme getScheme() {
        return new GroupReportByPlanId_argsStandardScheme();
      }
    }

    private static class GroupReportByPlanId_argsStandardScheme extends StandardScheme<GroupReportByPlanId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GroupReportByPlanId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GroupReportByPlanId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GroupReportByPlanId_argsTupleSchemeFactory implements SchemeFactory {
      public GroupReportByPlanId_argsTupleScheme getScheme() {
        return new GroupReportByPlanId_argsTupleScheme();
      }
    }

    private static class GroupReportByPlanId_argsTupleScheme extends TupleScheme<GroupReportByPlanId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GroupReportByPlanId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GroupReportByPlanId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class GroupReportByPlanId_result implements org.apache.thrift.TBase<GroupReportByPlanId_result, GroupReportByPlanId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupReportByPlanId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GroupReportByPlanId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GroupReportByPlanId_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupReportByPlanId_result.class, metaDataMap);
    }

    public GroupReportByPlanId_result() {
    }

    public GroupReportByPlanId_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GroupReportByPlanId_result(GroupReportByPlanId_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public GroupReportByPlanId_result deepCopy() {
      return new GroupReportByPlanId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public GroupReportByPlanId_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GroupReportByPlanId_result)
        return this.equals((GroupReportByPlanId_result)that);
      return false;
    }

    public boolean equals(GroupReportByPlanId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GroupReportByPlanId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GroupReportByPlanId_result typedOther = (GroupReportByPlanId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GroupReportByPlanId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GroupReportByPlanId_resultStandardSchemeFactory implements SchemeFactory {
      public GroupReportByPlanId_resultStandardScheme getScheme() {
        return new GroupReportByPlanId_resultStandardScheme();
      }
    }

    private static class GroupReportByPlanId_resultStandardScheme extends StandardScheme<GroupReportByPlanId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GroupReportByPlanId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GroupReportByPlanId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GroupReportByPlanId_resultTupleSchemeFactory implements SchemeFactory {
      public GroupReportByPlanId_resultTupleScheme getScheme() {
        return new GroupReportByPlanId_resultTupleScheme();
      }
    }

    private static class GroupReportByPlanId_resultTupleScheme extends TupleScheme<GroupReportByPlanId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GroupReportByPlanId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GroupReportByPlanId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class PlanReportByUid_args implements org.apache.thrift.TBase<PlanReportByUid_args, PlanReportByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlanReportByUid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PlanReportByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PlanReportByUid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlanReportByUid_args.class, metaDataMap);
    }

    public PlanReportByUid_args() {
    }

    public PlanReportByUid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PlanReportByUid_args(PlanReportByUid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public PlanReportByUid_args deepCopy() {
      return new PlanReportByUid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public PlanReportByUid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public PlanReportByUid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PlanReportByUid_args)
        return this.equals((PlanReportByUid_args)that);
      return false;
    }

    public boolean equals(PlanReportByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(PlanReportByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      PlanReportByUid_args typedOther = (PlanReportByUid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PlanReportByUid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PlanReportByUid_argsStandardSchemeFactory implements SchemeFactory {
      public PlanReportByUid_argsStandardScheme getScheme() {
        return new PlanReportByUid_argsStandardScheme();
      }
    }

    private static class PlanReportByUid_argsStandardScheme extends StandardScheme<PlanReportByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PlanReportByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PlanReportByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PlanReportByUid_argsTupleSchemeFactory implements SchemeFactory {
      public PlanReportByUid_argsTupleScheme getScheme() {
        return new PlanReportByUid_argsTupleScheme();
      }
    }

    private static class PlanReportByUid_argsTupleScheme extends TupleScheme<PlanReportByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PlanReportByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PlanReportByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class PlanReportByUid_result implements org.apache.thrift.TBase<PlanReportByUid_result, PlanReportByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlanReportByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PlanReportByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PlanReportByUid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlanReportByUid_result.class, metaDataMap);
    }

    public PlanReportByUid_result() {
    }

    public PlanReportByUid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PlanReportByUid_result(PlanReportByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public PlanReportByUid_result deepCopy() {
      return new PlanReportByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public PlanReportByUid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PlanReportByUid_result)
        return this.equals((PlanReportByUid_result)that);
      return false;
    }

    public boolean equals(PlanReportByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(PlanReportByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      PlanReportByUid_result typedOther = (PlanReportByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PlanReportByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PlanReportByUid_resultStandardSchemeFactory implements SchemeFactory {
      public PlanReportByUid_resultStandardScheme getScheme() {
        return new PlanReportByUid_resultStandardScheme();
      }
    }

    private static class PlanReportByUid_resultStandardScheme extends StandardScheme<PlanReportByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PlanReportByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PlanReportByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PlanReportByUid_resultTupleSchemeFactory implements SchemeFactory {
      public PlanReportByUid_resultTupleScheme getScheme() {
        return new PlanReportByUid_resultTupleScheme();
      }
    }

    private static class PlanReportByUid_resultTupleScheme extends TupleScheme<PlanReportByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PlanReportByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PlanReportByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AreaByAdid_args implements org.apache.thrift.TBase<AreaByAdid_args, AreaByAdid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByAdid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByAdid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByAdid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByAdid_args.class, metaDataMap);
    }

    public AreaByAdid_args() {
    }

    public AreaByAdid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByAdid_args(AreaByAdid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public AreaByAdid_args deepCopy() {
      return new AreaByAdid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public AreaByAdid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public AreaByAdid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByAdid_args)
        return this.equals((AreaByAdid_args)that);
      return false;
    }

    public boolean equals(AreaByAdid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByAdid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByAdid_args typedOther = (AreaByAdid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByAdid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByAdid_argsStandardSchemeFactory implements SchemeFactory {
      public AreaByAdid_argsStandardScheme getScheme() {
        return new AreaByAdid_argsStandardScheme();
      }
    }

    private static class AreaByAdid_argsStandardScheme extends StandardScheme<AreaByAdid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByAdid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByAdid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByAdid_argsTupleSchemeFactory implements SchemeFactory {
      public AreaByAdid_argsTupleScheme getScheme() {
        return new AreaByAdid_argsTupleScheme();
      }
    }

    private static class AreaByAdid_argsTupleScheme extends TupleScheme<AreaByAdid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class AreaByAdid_result implements org.apache.thrift.TBase<AreaByAdid_result, AreaByAdid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByAdid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByAdid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByAdid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByAdid_result.class, metaDataMap);
    }

    public AreaByAdid_result() {
    }

    public AreaByAdid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByAdid_result(AreaByAdid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public AreaByAdid_result deepCopy() {
      return new AreaByAdid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public AreaByAdid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByAdid_result)
        return this.equals((AreaByAdid_result)that);
      return false;
    }

    public boolean equals(AreaByAdid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByAdid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByAdid_result typedOther = (AreaByAdid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByAdid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByAdid_resultStandardSchemeFactory implements SchemeFactory {
      public AreaByAdid_resultStandardScheme getScheme() {
        return new AreaByAdid_resultStandardScheme();
      }
    }

    private static class AreaByAdid_resultStandardScheme extends StandardScheme<AreaByAdid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByAdid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByAdid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByAdid_resultTupleSchemeFactory implements SchemeFactory {
      public AreaByAdid_resultTupleScheme getScheme() {
        return new AreaByAdid_resultTupleScheme();
      }
    }

    private static class AreaByAdid_resultTupleScheme extends TupleScheme<AreaByAdid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AreaByGid_args implements org.apache.thrift.TBase<AreaByGid_args, AreaByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByGid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByGid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByGid_args.class, metaDataMap);
    }

    public AreaByGid_args() {
    }

    public AreaByGid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByGid_args(AreaByGid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public AreaByGid_args deepCopy() {
      return new AreaByGid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public AreaByGid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public AreaByGid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByGid_args)
        return this.equals((AreaByGid_args)that);
      return false;
    }

    public boolean equals(AreaByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByGid_args typedOther = (AreaByGid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByGid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByGid_argsStandardSchemeFactory implements SchemeFactory {
      public AreaByGid_argsStandardScheme getScheme() {
        return new AreaByGid_argsStandardScheme();
      }
    }

    private static class AreaByGid_argsStandardScheme extends StandardScheme<AreaByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByGid_argsTupleSchemeFactory implements SchemeFactory {
      public AreaByGid_argsTupleScheme getScheme() {
        return new AreaByGid_argsTupleScheme();
      }
    }

    private static class AreaByGid_argsTupleScheme extends TupleScheme<AreaByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class AreaByGid_result implements org.apache.thrift.TBase<AreaByGid_result, AreaByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByGid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByGid_result.class, metaDataMap);
    }

    public AreaByGid_result() {
    }

    public AreaByGid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByGid_result(AreaByGid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public AreaByGid_result deepCopy() {
      return new AreaByGid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public AreaByGid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByGid_result)
        return this.equals((AreaByGid_result)that);
      return false;
    }

    public boolean equals(AreaByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByGid_result typedOther = (AreaByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByGid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByGid_resultStandardSchemeFactory implements SchemeFactory {
      public AreaByGid_resultStandardScheme getScheme() {
        return new AreaByGid_resultStandardScheme();
      }
    }

    private static class AreaByGid_resultStandardScheme extends StandardScheme<AreaByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByGid_resultTupleSchemeFactory implements SchemeFactory {
      public AreaByGid_resultTupleScheme getScheme() {
        return new AreaByGid_resultTupleScheme();
      }
    }

    private static class AreaByGid_resultTupleScheme extends TupleScheme<AreaByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AreaByPid_args implements org.apache.thrift.TBase<AreaByPid_args, AreaByPid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByPid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByPid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByPid_args.class, metaDataMap);
    }

    public AreaByPid_args() {
    }

    public AreaByPid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByPid_args(AreaByPid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public AreaByPid_args deepCopy() {
      return new AreaByPid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public AreaByPid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public AreaByPid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByPid_args)
        return this.equals((AreaByPid_args)that);
      return false;
    }

    public boolean equals(AreaByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByPid_args typedOther = (AreaByPid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByPid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByPid_argsStandardSchemeFactory implements SchemeFactory {
      public AreaByPid_argsStandardScheme getScheme() {
        return new AreaByPid_argsStandardScheme();
      }
    }

    private static class AreaByPid_argsStandardScheme extends StandardScheme<AreaByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByPid_argsTupleSchemeFactory implements SchemeFactory {
      public AreaByPid_argsTupleScheme getScheme() {
        return new AreaByPid_argsTupleScheme();
      }
    }

    private static class AreaByPid_argsTupleScheme extends TupleScheme<AreaByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class AreaByPid_result implements org.apache.thrift.TBase<AreaByPid_result, AreaByPid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByPid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByPid_result.class, metaDataMap);
    }

    public AreaByPid_result() {
    }

    public AreaByPid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByPid_result(AreaByPid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public AreaByPid_result deepCopy() {
      return new AreaByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public AreaByPid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByPid_result)
        return this.equals((AreaByPid_result)that);
      return false;
    }

    public boolean equals(AreaByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByPid_result typedOther = (AreaByPid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByPid_resultStandardSchemeFactory implements SchemeFactory {
      public AreaByPid_resultStandardScheme getScheme() {
        return new AreaByPid_resultStandardScheme();
      }
    }

    private static class AreaByPid_resultStandardScheme extends StandardScheme<AreaByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByPid_resultTupleSchemeFactory implements SchemeFactory {
      public AreaByPid_resultTupleScheme getScheme() {
        return new AreaByPid_resultTupleScheme();
      }
    }

    private static class AreaByPid_resultTupleScheme extends TupleScheme<AreaByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AreaByUid_args implements org.apache.thrift.TBase<AreaByUid_args, AreaByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByUid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByUid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByUid_args.class, metaDataMap);
    }

    public AreaByUid_args() {
    }

    public AreaByUid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByUid_args(AreaByUid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public AreaByUid_args deepCopy() {
      return new AreaByUid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public AreaByUid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public AreaByUid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByUid_args)
        return this.equals((AreaByUid_args)that);
      return false;
    }

    public boolean equals(AreaByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByUid_args typedOther = (AreaByUid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByUid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByUid_argsStandardSchemeFactory implements SchemeFactory {
      public AreaByUid_argsStandardScheme getScheme() {
        return new AreaByUid_argsStandardScheme();
      }
    }

    private static class AreaByUid_argsStandardScheme extends StandardScheme<AreaByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByUid_argsTupleSchemeFactory implements SchemeFactory {
      public AreaByUid_argsTupleScheme getScheme() {
        return new AreaByUid_argsTupleScheme();
      }
    }

    private static class AreaByUid_argsTupleScheme extends TupleScheme<AreaByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class AreaByUid_result implements org.apache.thrift.TBase<AreaByUid_result, AreaByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AreaByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AreaByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AreaByUid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AreaByUid_result.class, metaDataMap);
    }

    public AreaByUid_result() {
    }

    public AreaByUid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AreaByUid_result(AreaByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public AreaByUid_result deepCopy() {
      return new AreaByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public AreaByUid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AreaByUid_result)
        return this.equals((AreaByUid_result)that);
      return false;
    }

    public boolean equals(AreaByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AreaByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AreaByUid_result typedOther = (AreaByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AreaByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AreaByUid_resultStandardSchemeFactory implements SchemeFactory {
      public AreaByUid_resultStandardScheme getScheme() {
        return new AreaByUid_resultStandardScheme();
      }
    }

    private static class AreaByUid_resultStandardScheme extends StandardScheme<AreaByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AreaByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AreaByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AreaByUid_resultTupleSchemeFactory implements SchemeFactory {
      public AreaByUid_resultTupleScheme getScheme() {
        return new AreaByUid_resultTupleScheme();
      }
    }

    private static class AreaByUid_resultTupleScheme extends TupleScheme<AreaByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AreaByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AreaByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DayByAdid_args implements org.apache.thrift.TBase<DayByAdid_args, DayByAdid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByAdid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByAdid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByAdid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByAdid_args.class, metaDataMap);
    }

    public DayByAdid_args() {
    }

    public DayByAdid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByAdid_args(DayByAdid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public DayByAdid_args deepCopy() {
      return new DayByAdid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public DayByAdid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public DayByAdid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByAdid_args)
        return this.equals((DayByAdid_args)that);
      return false;
    }

    public boolean equals(DayByAdid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByAdid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByAdid_args typedOther = (DayByAdid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByAdid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByAdid_argsStandardSchemeFactory implements SchemeFactory {
      public DayByAdid_argsStandardScheme getScheme() {
        return new DayByAdid_argsStandardScheme();
      }
    }

    private static class DayByAdid_argsStandardScheme extends StandardScheme<DayByAdid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByAdid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByAdid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByAdid_argsTupleSchemeFactory implements SchemeFactory {
      public DayByAdid_argsTupleScheme getScheme() {
        return new DayByAdid_argsTupleScheme();
      }
    }

    private static class DayByAdid_argsTupleScheme extends TupleScheme<DayByAdid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class DayByAdid_result implements org.apache.thrift.TBase<DayByAdid_result, DayByAdid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByAdid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByAdid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByAdid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByAdid_result.class, metaDataMap);
    }

    public DayByAdid_result() {
    }

    public DayByAdid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByAdid_result(DayByAdid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public DayByAdid_result deepCopy() {
      return new DayByAdid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public DayByAdid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByAdid_result)
        return this.equals((DayByAdid_result)that);
      return false;
    }

    public boolean equals(DayByAdid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByAdid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByAdid_result typedOther = (DayByAdid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByAdid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByAdid_resultStandardSchemeFactory implements SchemeFactory {
      public DayByAdid_resultStandardScheme getScheme() {
        return new DayByAdid_resultStandardScheme();
      }
    }

    private static class DayByAdid_resultStandardScheme extends StandardScheme<DayByAdid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByAdid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByAdid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByAdid_resultTupleSchemeFactory implements SchemeFactory {
      public DayByAdid_resultTupleScheme getScheme() {
        return new DayByAdid_resultTupleScheme();
      }
    }

    private static class DayByAdid_resultTupleScheme extends TupleScheme<DayByAdid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DayByGid_args implements org.apache.thrift.TBase<DayByGid_args, DayByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByGid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByGid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByGid_args.class, metaDataMap);
    }

    public DayByGid_args() {
    }

    public DayByGid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByGid_args(DayByGid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public DayByGid_args deepCopy() {
      return new DayByGid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public DayByGid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public DayByGid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByGid_args)
        return this.equals((DayByGid_args)that);
      return false;
    }

    public boolean equals(DayByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByGid_args typedOther = (DayByGid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByGid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByGid_argsStandardSchemeFactory implements SchemeFactory {
      public DayByGid_argsStandardScheme getScheme() {
        return new DayByGid_argsStandardScheme();
      }
    }

    private static class DayByGid_argsStandardScheme extends StandardScheme<DayByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByGid_argsTupleSchemeFactory implements SchemeFactory {
      public DayByGid_argsTupleScheme getScheme() {
        return new DayByGid_argsTupleScheme();
      }
    }

    private static class DayByGid_argsTupleScheme extends TupleScheme<DayByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class DayByGid_result implements org.apache.thrift.TBase<DayByGid_result, DayByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByGid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByGid_result.class, metaDataMap);
    }

    public DayByGid_result() {
    }

    public DayByGid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByGid_result(DayByGid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public DayByGid_result deepCopy() {
      return new DayByGid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public DayByGid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByGid_result)
        return this.equals((DayByGid_result)that);
      return false;
    }

    public boolean equals(DayByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByGid_result typedOther = (DayByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByGid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByGid_resultStandardSchemeFactory implements SchemeFactory {
      public DayByGid_resultStandardScheme getScheme() {
        return new DayByGid_resultStandardScheme();
      }
    }

    private static class DayByGid_resultStandardScheme extends StandardScheme<DayByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByGid_resultTupleSchemeFactory implements SchemeFactory {
      public DayByGid_resultTupleScheme getScheme() {
        return new DayByGid_resultTupleScheme();
      }
    }

    private static class DayByGid_resultTupleScheme extends TupleScheme<DayByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DayByPid_args implements org.apache.thrift.TBase<DayByPid_args, DayByPid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByPid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByPid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByPid_args.class, metaDataMap);
    }

    public DayByPid_args() {
    }

    public DayByPid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByPid_args(DayByPid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public DayByPid_args deepCopy() {
      return new DayByPid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public DayByPid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public DayByPid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByPid_args)
        return this.equals((DayByPid_args)that);
      return false;
    }

    public boolean equals(DayByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByPid_args typedOther = (DayByPid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByPid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByPid_argsStandardSchemeFactory implements SchemeFactory {
      public DayByPid_argsStandardScheme getScheme() {
        return new DayByPid_argsStandardScheme();
      }
    }

    private static class DayByPid_argsStandardScheme extends StandardScheme<DayByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByPid_argsTupleSchemeFactory implements SchemeFactory {
      public DayByPid_argsTupleScheme getScheme() {
        return new DayByPid_argsTupleScheme();
      }
    }

    private static class DayByPid_argsTupleScheme extends TupleScheme<DayByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class DayByPid_result implements org.apache.thrift.TBase<DayByPid_result, DayByPid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByPid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByPid_result.class, metaDataMap);
    }

    public DayByPid_result() {
    }

    public DayByPid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByPid_result(DayByPid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public DayByPid_result deepCopy() {
      return new DayByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public DayByPid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByPid_result)
        return this.equals((DayByPid_result)that);
      return false;
    }

    public boolean equals(DayByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByPid_result typedOther = (DayByPid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByPid_resultStandardSchemeFactory implements SchemeFactory {
      public DayByPid_resultStandardScheme getScheme() {
        return new DayByPid_resultStandardScheme();
      }
    }

    private static class DayByPid_resultStandardScheme extends StandardScheme<DayByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByPid_resultTupleSchemeFactory implements SchemeFactory {
      public DayByPid_resultTupleScheme getScheme() {
        return new DayByPid_resultTupleScheme();
      }
    }

    private static class DayByPid_resultTupleScheme extends TupleScheme<DayByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DayByUid_args implements org.apache.thrift.TBase<DayByUid_args, DayByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByUid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByUid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByUid_args.class, metaDataMap);
    }

    public DayByUid_args() {
    }

    public DayByUid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByUid_args(DayByUid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public DayByUid_args deepCopy() {
      return new DayByUid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public DayByUid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public DayByUid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByUid_args)
        return this.equals((DayByUid_args)that);
      return false;
    }

    public boolean equals(DayByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByUid_args typedOther = (DayByUid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByUid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByUid_argsStandardSchemeFactory implements SchemeFactory {
      public DayByUid_argsStandardScheme getScheme() {
        return new DayByUid_argsStandardScheme();
      }
    }

    private static class DayByUid_argsStandardScheme extends StandardScheme<DayByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByUid_argsTupleSchemeFactory implements SchemeFactory {
      public DayByUid_argsTupleScheme getScheme() {
        return new DayByUid_argsTupleScheme();
      }
    }

    private static class DayByUid_argsTupleScheme extends TupleScheme<DayByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class DayByUid_result implements org.apache.thrift.TBase<DayByUid_result, DayByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DayByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DayByUid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayByUid_result.class, metaDataMap);
    }

    public DayByUid_result() {
    }

    public DayByUid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DayByUid_result(DayByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public DayByUid_result deepCopy() {
      return new DayByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public DayByUid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DayByUid_result)
        return this.equals((DayByUid_result)that);
      return false;
    }

    public boolean equals(DayByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DayByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DayByUid_result typedOther = (DayByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DayByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DayByUid_resultStandardSchemeFactory implements SchemeFactory {
      public DayByUid_resultStandardScheme getScheme() {
        return new DayByUid_resultStandardScheme();
      }
    }

    private static class DayByUid_resultStandardScheme extends StandardScheme<DayByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DayByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DayByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DayByUid_resultTupleSchemeFactory implements SchemeFactory {
      public DayByUid_resultTupleScheme getScheme() {
        return new DayByUid_resultTupleScheme();
      }
    }

    private static class DayByUid_resultTupleScheme extends TupleScheme<DayByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DayByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DayByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SourceByAdid_args implements org.apache.thrift.TBase<SourceByAdid_args, SourceByAdid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByAdid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByAdid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByAdid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByAdid_args.class, metaDataMap);
    }

    public SourceByAdid_args() {
    }

    public SourceByAdid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByAdid_args(SourceByAdid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public SourceByAdid_args deepCopy() {
      return new SourceByAdid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public SourceByAdid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public SourceByAdid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByAdid_args)
        return this.equals((SourceByAdid_args)that);
      return false;
    }

    public boolean equals(SourceByAdid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByAdid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByAdid_args typedOther = (SourceByAdid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByAdid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByAdid_argsStandardSchemeFactory implements SchemeFactory {
      public SourceByAdid_argsStandardScheme getScheme() {
        return new SourceByAdid_argsStandardScheme();
      }
    }

    private static class SourceByAdid_argsStandardScheme extends StandardScheme<SourceByAdid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByAdid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByAdid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByAdid_argsTupleSchemeFactory implements SchemeFactory {
      public SourceByAdid_argsTupleScheme getScheme() {
        return new SourceByAdid_argsTupleScheme();
      }
    }

    private static class SourceByAdid_argsTupleScheme extends TupleScheme<SourceByAdid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class SourceByAdid_result implements org.apache.thrift.TBase<SourceByAdid_result, SourceByAdid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByAdid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByAdid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByAdid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByAdid_result.class, metaDataMap);
    }

    public SourceByAdid_result() {
    }

    public SourceByAdid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByAdid_result(SourceByAdid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public SourceByAdid_result deepCopy() {
      return new SourceByAdid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public SourceByAdid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByAdid_result)
        return this.equals((SourceByAdid_result)that);
      return false;
    }

    public boolean equals(SourceByAdid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByAdid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByAdid_result typedOther = (SourceByAdid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByAdid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByAdid_resultStandardSchemeFactory implements SchemeFactory {
      public SourceByAdid_resultStandardScheme getScheme() {
        return new SourceByAdid_resultStandardScheme();
      }
    }

    private static class SourceByAdid_resultStandardScheme extends StandardScheme<SourceByAdid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByAdid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByAdid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByAdid_resultTupleSchemeFactory implements SchemeFactory {
      public SourceByAdid_resultTupleScheme getScheme() {
        return new SourceByAdid_resultTupleScheme();
      }
    }

    private static class SourceByAdid_resultTupleScheme extends TupleScheme<SourceByAdid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SourceByGid_args implements org.apache.thrift.TBase<SourceByGid_args, SourceByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByGid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByGid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByGid_args.class, metaDataMap);
    }

    public SourceByGid_args() {
    }

    public SourceByGid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByGid_args(SourceByGid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public SourceByGid_args deepCopy() {
      return new SourceByGid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public SourceByGid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public SourceByGid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByGid_args)
        return this.equals((SourceByGid_args)that);
      return false;
    }

    public boolean equals(SourceByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByGid_args typedOther = (SourceByGid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByGid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByGid_argsStandardSchemeFactory implements SchemeFactory {
      public SourceByGid_argsStandardScheme getScheme() {
        return new SourceByGid_argsStandardScheme();
      }
    }

    private static class SourceByGid_argsStandardScheme extends StandardScheme<SourceByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByGid_argsTupleSchemeFactory implements SchemeFactory {
      public SourceByGid_argsTupleScheme getScheme() {
        return new SourceByGid_argsTupleScheme();
      }
    }

    private static class SourceByGid_argsTupleScheme extends TupleScheme<SourceByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class SourceByGid_result implements org.apache.thrift.TBase<SourceByGid_result, SourceByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByGid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByGid_result.class, metaDataMap);
    }

    public SourceByGid_result() {
    }

    public SourceByGid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByGid_result(SourceByGid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public SourceByGid_result deepCopy() {
      return new SourceByGid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public SourceByGid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByGid_result)
        return this.equals((SourceByGid_result)that);
      return false;
    }

    public boolean equals(SourceByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByGid_result typedOther = (SourceByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByGid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByGid_resultStandardSchemeFactory implements SchemeFactory {
      public SourceByGid_resultStandardScheme getScheme() {
        return new SourceByGid_resultStandardScheme();
      }
    }

    private static class SourceByGid_resultStandardScheme extends StandardScheme<SourceByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByGid_resultTupleSchemeFactory implements SchemeFactory {
      public SourceByGid_resultTupleScheme getScheme() {
        return new SourceByGid_resultTupleScheme();
      }
    }

    private static class SourceByGid_resultTupleScheme extends TupleScheme<SourceByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SourceByPid_args implements org.apache.thrift.TBase<SourceByPid_args, SourceByPid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByPid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByPid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByPid_args.class, metaDataMap);
    }

    public SourceByPid_args() {
    }

    public SourceByPid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByPid_args(SourceByPid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public SourceByPid_args deepCopy() {
      return new SourceByPid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public SourceByPid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public SourceByPid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByPid_args)
        return this.equals((SourceByPid_args)that);
      return false;
    }

    public boolean equals(SourceByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByPid_args typedOther = (SourceByPid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByPid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByPid_argsStandardSchemeFactory implements SchemeFactory {
      public SourceByPid_argsStandardScheme getScheme() {
        return new SourceByPid_argsStandardScheme();
      }
    }

    private static class SourceByPid_argsStandardScheme extends StandardScheme<SourceByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByPid_argsTupleSchemeFactory implements SchemeFactory {
      public SourceByPid_argsTupleScheme getScheme() {
        return new SourceByPid_argsTupleScheme();
      }
    }

    private static class SourceByPid_argsTupleScheme extends TupleScheme<SourceByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class SourceByPid_result implements org.apache.thrift.TBase<SourceByPid_result, SourceByPid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByPid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByPid_result.class, metaDataMap);
    }

    public SourceByPid_result() {
    }

    public SourceByPid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByPid_result(SourceByPid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public SourceByPid_result deepCopy() {
      return new SourceByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public SourceByPid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByPid_result)
        return this.equals((SourceByPid_result)that);
      return false;
    }

    public boolean equals(SourceByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByPid_result typedOther = (SourceByPid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByPid_resultStandardSchemeFactory implements SchemeFactory {
      public SourceByPid_resultStandardScheme getScheme() {
        return new SourceByPid_resultStandardScheme();
      }
    }

    private static class SourceByPid_resultStandardScheme extends StandardScheme<SourceByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByPid_resultTupleSchemeFactory implements SchemeFactory {
      public SourceByPid_resultTupleScheme getScheme() {
        return new SourceByPid_resultTupleScheme();
      }
    }

    private static class SourceByPid_resultTupleScheme extends TupleScheme<SourceByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SourceByUid_args implements org.apache.thrift.TBase<SourceByUid_args, SourceByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByUid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByUid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByUid_args.class, metaDataMap);
    }

    public SourceByUid_args() {
    }

    public SourceByUid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByUid_args(SourceByUid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public SourceByUid_args deepCopy() {
      return new SourceByUid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public SourceByUid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public SourceByUid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByUid_args)
        return this.equals((SourceByUid_args)that);
      return false;
    }

    public boolean equals(SourceByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByUid_args typedOther = (SourceByUid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByUid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByUid_argsStandardSchemeFactory implements SchemeFactory {
      public SourceByUid_argsStandardScheme getScheme() {
        return new SourceByUid_argsStandardScheme();
      }
    }

    private static class SourceByUid_argsStandardScheme extends StandardScheme<SourceByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByUid_argsTupleSchemeFactory implements SchemeFactory {
      public SourceByUid_argsTupleScheme getScheme() {
        return new SourceByUid_argsTupleScheme();
      }
    }

    private static class SourceByUid_argsTupleScheme extends TupleScheme<SourceByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class SourceByUid_result implements org.apache.thrift.TBase<SourceByUid_result, SourceByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SourceByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SourceByUid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceByUid_result.class, metaDataMap);
    }

    public SourceByUid_result() {
    }

    public SourceByUid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SourceByUid_result(SourceByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public SourceByUid_result deepCopy() {
      return new SourceByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public SourceByUid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SourceByUid_result)
        return this.equals((SourceByUid_result)that);
      return false;
    }

    public boolean equals(SourceByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SourceByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SourceByUid_result typedOther = (SourceByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SourceByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SourceByUid_resultStandardSchemeFactory implements SchemeFactory {
      public SourceByUid_resultStandardScheme getScheme() {
        return new SourceByUid_resultStandardScheme();
      }
    }

    private static class SourceByUid_resultStandardScheme extends StandardScheme<SourceByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SourceByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SourceByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SourceByUid_resultTupleSchemeFactory implements SchemeFactory {
      public SourceByUid_resultTupleScheme getScheme() {
        return new SourceByUid_resultTupleScheme();
      }
    }

    private static class SourceByUid_resultTupleScheme extends TupleScheme<SourceByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SourceByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SourceByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class HourByAdid_args implements org.apache.thrift.TBase<HourByAdid_args, HourByAdid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByAdid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByAdid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByAdid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByAdid_args.class, metaDataMap);
    }

    public HourByAdid_args() {
    }

    public HourByAdid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByAdid_args(HourByAdid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public HourByAdid_args deepCopy() {
      return new HourByAdid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public HourByAdid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public HourByAdid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByAdid_args)
        return this.equals((HourByAdid_args)that);
      return false;
    }

    public boolean equals(HourByAdid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByAdid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByAdid_args typedOther = (HourByAdid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByAdid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByAdid_argsStandardSchemeFactory implements SchemeFactory {
      public HourByAdid_argsStandardScheme getScheme() {
        return new HourByAdid_argsStandardScheme();
      }
    }

    private static class HourByAdid_argsStandardScheme extends StandardScheme<HourByAdid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByAdid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByAdid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByAdid_argsTupleSchemeFactory implements SchemeFactory {
      public HourByAdid_argsTupleScheme getScheme() {
        return new HourByAdid_argsTupleScheme();
      }
    }

    private static class HourByAdid_argsTupleScheme extends TupleScheme<HourByAdid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByAdid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class HourByAdid_result implements org.apache.thrift.TBase<HourByAdid_result, HourByAdid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByAdid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByAdid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByAdid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByAdid_result.class, metaDataMap);
    }

    public HourByAdid_result() {
    }

    public HourByAdid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByAdid_result(HourByAdid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public HourByAdid_result deepCopy() {
      return new HourByAdid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public HourByAdid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByAdid_result)
        return this.equals((HourByAdid_result)that);
      return false;
    }

    public boolean equals(HourByAdid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByAdid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByAdid_result typedOther = (HourByAdid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByAdid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByAdid_resultStandardSchemeFactory implements SchemeFactory {
      public HourByAdid_resultStandardScheme getScheme() {
        return new HourByAdid_resultStandardScheme();
      }
    }

    private static class HourByAdid_resultStandardScheme extends StandardScheme<HourByAdid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByAdid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByAdid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByAdid_resultTupleSchemeFactory implements SchemeFactory {
      public HourByAdid_resultTupleScheme getScheme() {
        return new HourByAdid_resultTupleScheme();
      }
    }

    private static class HourByAdid_resultTupleScheme extends TupleScheme<HourByAdid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByAdid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class HourByGid_args implements org.apache.thrift.TBase<HourByGid_args, HourByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByGid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByGid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByGid_args.class, metaDataMap);
    }

    public HourByGid_args() {
    }

    public HourByGid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByGid_args(HourByGid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public HourByGid_args deepCopy() {
      return new HourByGid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public HourByGid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public HourByGid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByGid_args)
        return this.equals((HourByGid_args)that);
      return false;
    }

    public boolean equals(HourByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByGid_args typedOther = (HourByGid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByGid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByGid_argsStandardSchemeFactory implements SchemeFactory {
      public HourByGid_argsStandardScheme getScheme() {
        return new HourByGid_argsStandardScheme();
      }
    }

    private static class HourByGid_argsStandardScheme extends StandardScheme<HourByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByGid_argsTupleSchemeFactory implements SchemeFactory {
      public HourByGid_argsTupleScheme getScheme() {
        return new HourByGid_argsTupleScheme();
      }
    }

    private static class HourByGid_argsTupleScheme extends TupleScheme<HourByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class HourByGid_result implements org.apache.thrift.TBase<HourByGid_result, HourByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByGid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByGid_result.class, metaDataMap);
    }

    public HourByGid_result() {
    }

    public HourByGid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByGid_result(HourByGid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public HourByGid_result deepCopy() {
      return new HourByGid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public HourByGid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByGid_result)
        return this.equals((HourByGid_result)that);
      return false;
    }

    public boolean equals(HourByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByGid_result typedOther = (HourByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByGid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByGid_resultStandardSchemeFactory implements SchemeFactory {
      public HourByGid_resultStandardScheme getScheme() {
        return new HourByGid_resultStandardScheme();
      }
    }

    private static class HourByGid_resultStandardScheme extends StandardScheme<HourByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByGid_resultTupleSchemeFactory implements SchemeFactory {
      public HourByGid_resultTupleScheme getScheme() {
        return new HourByGid_resultTupleScheme();
      }
    }

    private static class HourByGid_resultTupleScheme extends TupleScheme<HourByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class HourByPid_args implements org.apache.thrift.TBase<HourByPid_args, HourByPid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByPid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByPid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByPid_args.class, metaDataMap);
    }

    public HourByPid_args() {
    }

    public HourByPid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByPid_args(HourByPid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public HourByPid_args deepCopy() {
      return new HourByPid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public HourByPid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public HourByPid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByPid_args)
        return this.equals((HourByPid_args)that);
      return false;
    }

    public boolean equals(HourByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByPid_args typedOther = (HourByPid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByPid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByPid_argsStandardSchemeFactory implements SchemeFactory {
      public HourByPid_argsStandardScheme getScheme() {
        return new HourByPid_argsStandardScheme();
      }
    }

    private static class HourByPid_argsStandardScheme extends StandardScheme<HourByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByPid_argsTupleSchemeFactory implements SchemeFactory {
      public HourByPid_argsTupleScheme getScheme() {
        return new HourByPid_argsTupleScheme();
      }
    }

    private static class HourByPid_argsTupleScheme extends TupleScheme<HourByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class HourByPid_result implements org.apache.thrift.TBase<HourByPid_result, HourByPid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByPid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByPid_result.class, metaDataMap);
    }

    public HourByPid_result() {
    }

    public HourByPid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByPid_result(HourByPid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public HourByPid_result deepCopy() {
      return new HourByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public HourByPid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByPid_result)
        return this.equals((HourByPid_result)that);
      return false;
    }

    public boolean equals(HourByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByPid_result typedOther = (HourByPid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByPid_resultStandardSchemeFactory implements SchemeFactory {
      public HourByPid_resultStandardScheme getScheme() {
        return new HourByPid_resultStandardScheme();
      }
    }

    private static class HourByPid_resultStandardScheme extends StandardScheme<HourByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByPid_resultTupleSchemeFactory implements SchemeFactory {
      public HourByPid_resultTupleScheme getScheme() {
        return new HourByPid_resultTupleScheme();
      }
    }

    private static class HourByPid_resultTupleScheme extends TupleScheme<HourByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class HourByUid_args implements org.apache.thrift.TBase<HourByUid_args, HourByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByUid_args");

    private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByUid_argsTupleSchemeFactory());
    }

    public queryOptions q; // required
    public pageOptions p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q((short)1, "q"),
      P((short)2, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q
            return Q;
          case 2: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, queryOptions.class)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pageOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByUid_args.class, metaDataMap);
    }

    public HourByUid_args() {
    }

    public HourByUid_args(
      queryOptions q,
      pageOptions p)
    {
      this();
      this.q = q;
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByUid_args(HourByUid_args other) {
      if (other.isSetQ()) {
        this.q = new queryOptions(other.q);
      }
      if (other.isSetP()) {
        this.p = new pageOptions(other.p);
      }
    }

    public HourByUid_args deepCopy() {
      return new HourByUid_args(this);
    }

    @Override
    public void clear() {
      this.q = null;
      this.p = null;
    }

    public queryOptions getQ() {
      return this.q;
    }

    public HourByUid_args setQ(queryOptions q) {
      this.q = q;
      return this;
    }

    public void unsetQ() {
      this.q = null;
    }

    /** Returns true if field q is set (has been assigned a value) and false otherwise */
    public boolean isSetQ() {
      return this.q != null;
    }

    public void setQIsSet(boolean value) {
      if (!value) {
        this.q = null;
      }
    }

    public pageOptions getP() {
      return this.p;
    }

    public HourByUid_args setP(pageOptions p) {
      this.p = p;
      return this;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case Q:
        if (value == null) {
          unsetQ();
        } else {
          setQ((queryOptions)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((pageOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case Q:
        return getQ();

      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case Q:
        return isSetQ();
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByUid_args)
        return this.equals((HourByUid_args)that);
      return false;
    }

    public boolean equals(HourByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_q = true && this.isSetQ();
      boolean that_present_q = true && that.isSetQ();
      if (this_present_q || that_present_q) {
        if (!(this_present_q && that_present_q))
          return false;
        if (!this.q.equals(that.q))
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByUid_args typedOther = (HourByUid_args)other;

      lastComparison = Boolean.valueOf(isSetQ()).compareTo(typedOther.isSetQ());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQ()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, typedOther.q);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(typedOther.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, typedOther.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByUid_args(");
      boolean first = true;

      sb.append("q:");
      if (this.q == null) {
        sb.append("null");
      } else {
        sb.append(this.q);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByUid_argsStandardSchemeFactory implements SchemeFactory {
      public HourByUid_argsStandardScheme getScheme() {
        return new HourByUid_argsStandardScheme();
      }
    }

    private static class HourByUid_argsStandardScheme extends StandardScheme<HourByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.q = new queryOptions();
                struct.q.read(iprot);
                struct.setQIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new pageOptions();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.q != null) {
          oprot.writeFieldBegin(Q_FIELD_DESC);
          struct.q.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByUid_argsTupleSchemeFactory implements SchemeFactory {
      public HourByUid_argsTupleScheme getScheme() {
        return new HourByUid_argsTupleScheme();
      }
    }

    private static class HourByUid_argsTupleScheme extends TupleScheme<HourByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQ()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQ()) {
          struct.q.write(oprot);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.q = new queryOptions();
          struct.q.read(iprot);
          struct.setQIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new pageOptions();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class HourByUid_result implements org.apache.thrift.TBase<HourByUid_result, HourByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HourByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HourByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HourByUid_resultTupleSchemeFactory());
    }

    public reportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, reportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HourByUid_result.class, metaDataMap);
    }

    public HourByUid_result() {
    }

    public HourByUid_result(
      reportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HourByUid_result(HourByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new reportResult(other.success);
      }
    }

    public HourByUid_result deepCopy() {
      return new HourByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public reportResult getSuccess() {
      return this.success;
    }

    public HourByUid_result setSuccess(reportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((reportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HourByUid_result)
        return this.equals((HourByUid_result)that);
      return false;
    }

    public boolean equals(HourByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(HourByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      HourByUid_result typedOther = (HourByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HourByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HourByUid_resultStandardSchemeFactory implements SchemeFactory {
      public HourByUid_resultStandardScheme getScheme() {
        return new HourByUid_resultStandardScheme();
      }
    }

    private static class HourByUid_resultStandardScheme extends StandardScheme<HourByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HourByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new reportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HourByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HourByUid_resultTupleSchemeFactory implements SchemeFactory {
      public HourByUid_resultTupleScheme getScheme() {
        return new HourByUid_resultTupleScheme();
      }
    }

    private static class HourByUid_resultTupleScheme extends TupleScheme<HourByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HourByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HourByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new reportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField IGNOREME_FIELD_DESC = new org.apache.thrift.protocol.TField("ignoreme", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public int ignoreme; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IGNOREME((short)1, "ignoreme");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IGNOREME
            return IGNOREME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IGNOREME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IGNOREME, new org.apache.thrift.meta_data.FieldMetaData("ignoreme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      int ignoreme)
    {
      this();
      this.ignoreme = ignoreme;
      setIgnoremeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ignoreme = other.ignoreme;
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      setIgnoremeIsSet(false);
      this.ignoreme = 0;
    }

    public int getIgnoreme() {
      return this.ignoreme;
    }

    public ping_args setIgnoreme(int ignoreme) {
      this.ignoreme = ignoreme;
      setIgnoremeIsSet(true);
      return this;
    }

    public void unsetIgnoreme() {
      __isset_bit_vector.clear(__IGNOREME_ISSET_ID);
    }

    /** Returns true if field ignoreme is set (has been assigned a value) and false otherwise */
    public boolean isSetIgnoreme() {
      return __isset_bit_vector.get(__IGNOREME_ISSET_ID);
    }

    public void setIgnoremeIsSet(boolean value) {
      __isset_bit_vector.set(__IGNOREME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IGNOREME:
        if (value == null) {
          unsetIgnoreme();
        } else {
          setIgnoreme((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IGNOREME:
        return Integer.valueOf(getIgnoreme());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IGNOREME:
        return isSetIgnoreme();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_ignoreme = true;
      boolean that_present_ignoreme = true;
      if (this_present_ignoreme || that_present_ignoreme) {
        if (!(this_present_ignoreme && that_present_ignoreme))
          return false;
        if (this.ignoreme != that.ignoreme)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      lastComparison = Boolean.valueOf(isSetIgnoreme()).compareTo(typedOther.isSetIgnoreme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIgnoreme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignoreme, typedOther.ignoreme);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("ignoreme:");
      sb.append(this.ignoreme);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IGNOREME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ignoreme = iprot.readI32();
                struct.setIgnoremeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IGNOREME_FIELD_DESC);
        oprot.writeI32(struct.ignoreme);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIgnoreme()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIgnoreme()) {
          oprot.writeI32(struct.ignoreme);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ignoreme = iprot.readI32();
          struct.setIgnoremeIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
